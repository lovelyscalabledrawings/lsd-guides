/ 
  :plain
    ## HTML: A markup for data
  
    We'll start simple. Let's have a grid section wrapper around a list of bulleted items.
    Items are full of microdata (dev.w3.org/html5/md/) that defines attributes of models rendered in html
    
    The first step is to convert HTML elements into Widget tree. Some elements are translated into widgets
    automatically (such as `<input>, <form>, <textarea> and <body>`). Those have very
    well defined behavior and so they simply work. But what about custom widgets you want to make?
    
    The solution is the **mutation** of elements. Mutation is a pair of selector and widget class name.
    So every element in document is matched against current mutation selectors and if matches, the element
    gets convereted into that specific class.
  
%section.grid
  %ul
    %li{:itemscope => true, :itemtype => "person http://schema.org/Person", :itemid => "ibolmo"}
      %h2
        %a{:itemprop => "url", :href => "http://github.com/ibolmo"} 
          %span{:itemprop => "name"} Olmo Maldonado
    
      %dl
        %dt Gender
        %dd{:itemprop => "gender"} Male
        %dt Job title
        %dd{:itemprop => "jobTitle"} Programmer
        %dt Email
        %dd
          %a{:href => "mailto:olmo@maldonado.biz", :itemprop => "email"} olmo@maldonado.biz
  
    /
      Official [schema.org Person reference](http://schema.org/Person) has detailed explanation
      of property names and their values. `document.getItems('person')` returns two following serialized
      `<li>` elements as items. 
      
      **itemid** is important, because it is used in query strings and as a value  
    %li{:itemscope => true, :itemtype => "person http://schema.org/Person", :itemid => "subtleGradient"}
      %h2
        %a{:itemprop => "url", :href => "http://github.com/subtleGradient"} 
          %span{:itemprop => "name"} Thomas Aylott
        
      %a{:href => "mailto:thomas@aylott.biz", :itemprop => "email"} thomas@aylott.biz